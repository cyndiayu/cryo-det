-- -------------------------------------------------------------
-- 
-- File Name: hdlsrc_IFFT_no_scale\t\RADIX2FFT_bitNatural.vhd
-- Created: 2018-01-25 18:20:51
-- 
-- Generated by MATLAB 9.0 and HDL Coder 3.8
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: RADIX2FFT_bitNatural
-- Source Path: t/IFFT/IFFT HDL Optimized/RADIX2FFT_bitNatural
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY RADIX2FFT_bitNatural IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        dout_4_1_re                       :   IN    std_logic_vector(19 DOWNTO 0);  -- sfix20_En15
        dout_4_1_im                       :   IN    std_logic_vector(19 DOWNTO 0);  -- sfix20_En15
        dout_4_1_vld                      :   IN    std_logic;
        softReset                         :   IN    std_logic;
        dout_re1                          :   OUT   std_logic_vector(19 DOWNTO 0);  -- sfix20_En15
        dout_im1                          :   OUT   std_logic_vector(19 DOWNTO 0);  -- sfix20_En15
        dout_vld1                         :   OUT   std_logic
        );
END RADIX2FFT_bitNatural;


ARCHITECTURE rtl OF RADIX2FFT_bitNatural IS

  -- Component Declarations
  COMPONENT dataMEM_re_1_16x20b
    PORT( clk                             :   IN    std_logic;
          wr_din                          :   IN    std_logic_vector(19 DOWNTO 0);  -- sfix20_En15
          wr_addr                         :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
          wr_en                           :   IN    std_logic;
          rd_addr                         :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
          rd_dout                         :   OUT   std_logic_vector(19 DOWNTO 0)  -- sfix20_En15
          );
  END COMPONENT;

  -- Signals
  SIGNAL wrStateMachineBitNatural_wrState : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL wrStateMachineBitNatural_wrAddrCnt : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL wrStateMachineBitNatural_wrState_next : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL wrStateMachineBitNatural_wrAddrCnt_next : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL WrEnb                            : std_logic;
  SIGNAL wrAddr                           : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL sampleIdx                        : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL rdAddr                           : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL memOut_im                        : std_logic_vector(19 DOWNTO 0);  -- ufix20
  SIGNAL memOut_im_signed                 : signed(19 DOWNTO 0);  -- sfix20_En15
  SIGNAL memOut_re                        : std_logic_vector(19 DOWNTO 0);  -- ufix20
  SIGNAL memOut_re_signed                 : signed(19 DOWNTO 0);  -- sfix20_En15
  SIGNAL rdStateMachineBitNatural_rdState : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL rdStateMachineBitNatural_rdAddrCnt : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL rdStateMachineBitNatural_doutVldReg1 : std_logic;
  SIGNAL rdStateMachineBitNatural_doutVldReg2 : std_logic;
  SIGNAL rdStateMachineBitNatural_doutReReg : signed(19 DOWNTO 0);  -- sfix20
  SIGNAL rdStateMachineBitNatural_doutImReg : signed(19 DOWNTO 0);  -- sfix20
  SIGNAL rdStateMachineBitNatural_rdState_next : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL rdStateMachineBitNatural_rdAddrCnt_next : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL rdStateMachineBitNatural_doutVldReg1_next : std_logic;
  SIGNAL rdStateMachineBitNatural_doutVldReg2_next : std_logic;
  SIGNAL rdStateMachineBitNatural_doutReReg_next : signed(19 DOWNTO 0);  -- sfix20_En15
  SIGNAL rdStateMachineBitNatural_doutImReg_next : signed(19 DOWNTO 0);  -- sfix20_En15
  SIGNAL dout_re1_tmp                     : signed(19 DOWNTO 0);  -- sfix20_En15
  SIGNAL dout_im1_tmp                     : signed(19 DOWNTO 0);  -- sfix20_En15

BEGIN
  u_dataMEM_im_1 : dataMEM_re_1_16x20b
    PORT MAP( clk => clk,
              wr_din => dout_4_1_im,  -- sfix20_En15
              wr_addr => std_logic_vector(wrAddr),  -- ufix4
              wr_en => WrEnb,
              rd_addr => std_logic_vector(rdAddr),  -- ufix4
              rd_dout => memOut_im  -- sfix20_En15
              );

  u_dataMEM_re_1_16x20b : dataMEM_re_1_16x20b
    PORT MAP( clk => clk,
              wr_din => dout_4_1_re,  -- sfix20_En15
              wr_addr => std_logic_vector(wrAddr),  -- ufix4
              wr_en => WrEnb,
              rd_addr => std_logic_vector(rdAddr),  -- ufix4
              rd_dout => memOut_re  -- sfix20_En15
              );

  -- wrStateMachineBitNatural
  wrStateMachineBitNatural_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' OR softReset = '1' THEN
        wrStateMachineBitNatural_wrState <= to_unsigned(16#0#, 2);
        wrStateMachineBitNatural_wrAddrCnt <= to_unsigned(16#0#, 4);
      ELSE 
        wrStateMachineBitNatural_wrState <= wrStateMachineBitNatural_wrState_next;
        wrStateMachineBitNatural_wrAddrCnt <= wrStateMachineBitNatural_wrAddrCnt_next;
      END IF;
    END IF;
  END PROCESS wrStateMachineBitNatural_process;

  wrStateMachineBitNatural_output : PROCESS (wrStateMachineBitNatural_wrState, wrStateMachineBitNatural_wrAddrCnt,
       dout_4_1_vld)
  BEGIN
    wrStateMachineBitNatural_wrState_next <= wrStateMachineBitNatural_wrState;
    wrStateMachineBitNatural_wrAddrCnt_next <= wrStateMachineBitNatural_wrAddrCnt;
    IF wrStateMachineBitNatural_wrState = to_unsigned(16#2#, 2) THEN 
      wrAddr <= unsigned'(wrStateMachineBitNatural_wrAddrCnt(0) & wrStateMachineBitNatural_wrAddrCnt(1) & wrStateMachineBitNatural_wrAddrCnt(2) & wrStateMachineBitNatural_wrAddrCnt(3));
    ELSE 
      wrAddr <= wrStateMachineBitNatural_wrAddrCnt;
    END IF;
    CASE wrStateMachineBitNatural_wrState IS
      WHEN "00" =>
        IF dout_4_1_vld = '1' THEN 
          wrStateMachineBitNatural_wrState_next <= to_unsigned(16#1#, 2);
          wrStateMachineBitNatural_wrAddrCnt_next <= to_unsigned(16#1#, 4);
        ELSE 
          wrStateMachineBitNatural_wrState_next <= to_unsigned(16#0#, 2);
          wrStateMachineBitNatural_wrAddrCnt_next <= to_unsigned(16#0#, 4);
        END IF;
      WHEN "01" =>
        IF dout_4_1_vld = '1' THEN 
          IF wrStateMachineBitNatural_wrAddrCnt = to_unsigned(16#F#, 4) THEN 
            wrStateMachineBitNatural_wrAddrCnt_next <= to_unsigned(16#0#, 4);
            wrStateMachineBitNatural_wrState_next <= to_unsigned(16#2#, 2);
          ELSE 
            wrStateMachineBitNatural_wrAddrCnt_next <= wrStateMachineBitNatural_wrAddrCnt + to_unsigned(16#1#, 4);
            wrStateMachineBitNatural_wrState_next <= to_unsigned(16#1#, 2);
          END IF;
        END IF;
      WHEN "10" =>
        IF dout_4_1_vld = '1' THEN 
          IF wrStateMachineBitNatural_wrAddrCnt = to_unsigned(16#F#, 4) THEN 
            wrStateMachineBitNatural_wrAddrCnt_next <= to_unsigned(16#0#, 4);
            wrStateMachineBitNatural_wrState_next <= to_unsigned(16#1#, 2);
          ELSE 
            wrStateMachineBitNatural_wrAddrCnt_next <= wrStateMachineBitNatural_wrAddrCnt + to_unsigned(16#1#, 4);
            wrStateMachineBitNatural_wrState_next <= to_unsigned(16#2#, 2);
          END IF;
        END IF;
      WHEN OTHERS => 
        wrStateMachineBitNatural_wrState_next <= to_unsigned(16#0#, 2);
        wrStateMachineBitNatural_wrAddrCnt_next <= to_unsigned(16#0#, 4);
    END CASE;
    WrEnb <= dout_4_1_vld;
    sampleIdx <= wrStateMachineBitNatural_wrAddrCnt;
  END PROCESS wrStateMachineBitNatural_output;


  memOut_im_signed <= signed(memOut_im);

  memOut_re_signed <= signed(memOut_re);

  -- rdStateMachineBitNatural
  rdStateMachineBitNatural_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' OR softReset = '1' THEN
        rdStateMachineBitNatural_rdState <= to_unsigned(16#0#, 2);
        rdStateMachineBitNatural_rdAddrCnt <= to_unsigned(16#0#, 4);
        rdStateMachineBitNatural_doutVldReg1 <= '0';
        rdStateMachineBitNatural_doutVldReg2 <= '0';
        rdStateMachineBitNatural_doutReReg <= to_signed(16#00000#, 20);
        rdStateMachineBitNatural_doutImReg <= to_signed(16#00000#, 20);
      ELSE 
        rdStateMachineBitNatural_rdState <= rdStateMachineBitNatural_rdState_next;
        rdStateMachineBitNatural_rdAddrCnt <= rdStateMachineBitNatural_rdAddrCnt_next;
        rdStateMachineBitNatural_doutVldReg1 <= rdStateMachineBitNatural_doutVldReg1_next;
        rdStateMachineBitNatural_doutVldReg2 <= rdStateMachineBitNatural_doutVldReg2_next;
        rdStateMachineBitNatural_doutReReg <= rdStateMachineBitNatural_doutReReg_next;
        rdStateMachineBitNatural_doutImReg <= rdStateMachineBitNatural_doutImReg_next;
      END IF;
    END IF;
  END PROCESS rdStateMachineBitNatural_process;

  rdStateMachineBitNatural_output : PROCESS (rdStateMachineBitNatural_rdState, rdStateMachineBitNatural_rdAddrCnt,
       rdStateMachineBitNatural_doutVldReg1,
       rdStateMachineBitNatural_doutVldReg2, rdStateMachineBitNatural_doutReReg,
       rdStateMachineBitNatural_doutImReg, sampleIdx, memOut_re_signed,
       memOut_im_signed)
  BEGIN
    rdStateMachineBitNatural_rdState_next <= rdStateMachineBitNatural_rdState;
    rdStateMachineBitNatural_rdAddrCnt_next <= rdStateMachineBitNatural_rdAddrCnt;
    rdStateMachineBitNatural_doutReReg_next <= rdStateMachineBitNatural_doutReReg;
    rdStateMachineBitNatural_doutImReg_next <= rdStateMachineBitNatural_doutImReg;
    IF rdStateMachineBitNatural_rdState = to_unsigned(16#1#, 2) THEN 
      rdAddr <= unsigned'(rdStateMachineBitNatural_rdAddrCnt(0) & rdStateMachineBitNatural_rdAddrCnt(1) & rdStateMachineBitNatural_rdAddrCnt(2) & rdStateMachineBitNatural_rdAddrCnt(3));
    ELSE 
      rdAddr <= rdStateMachineBitNatural_rdAddrCnt;
    END IF;
    CASE rdStateMachineBitNatural_rdState IS
      WHEN "00" =>
        rdStateMachineBitNatural_doutVldReg1_next <= '0';
        IF sampleIdx >= to_unsigned(16#D#, 4) THEN 
          rdStateMachineBitNatural_rdAddrCnt_next <= to_unsigned(16#1#, 4);
          rdStateMachineBitNatural_doutVldReg1_next <= '1';
          rdStateMachineBitNatural_rdState_next <= to_unsigned(16#1#, 2);
        ELSE 
          rdStateMachineBitNatural_rdAddrCnt_next <= to_unsigned(16#0#, 4);
          rdStateMachineBitNatural_rdState_next <= to_unsigned(16#0#, 2);
        END IF;
      WHEN "01" =>
        rdStateMachineBitNatural_doutVldReg1_next <= '1';
        IF rdStateMachineBitNatural_rdAddrCnt = to_unsigned(16#F#, 4) THEN 
          rdStateMachineBitNatural_rdAddrCnt_next <= to_unsigned(16#0#, 4);
          rdStateMachineBitNatural_rdState_next <= to_unsigned(16#2#, 2);
        ELSE 
          rdStateMachineBitNatural_rdAddrCnt_next <= rdStateMachineBitNatural_rdAddrCnt + to_unsigned(16#1#, 4);
          rdStateMachineBitNatural_rdState_next <= to_unsigned(16#1#, 2);
        END IF;
      WHEN "10" =>
        rdStateMachineBitNatural_doutVldReg1_next <= '0';
        IF sampleIdx >= to_unsigned(16#D#, 4) THEN 
          rdStateMachineBitNatural_rdAddrCnt_next <= to_unsigned(16#1#, 4);
          rdStateMachineBitNatural_doutVldReg1_next <= '1';
          rdStateMachineBitNatural_rdState_next <= to_unsigned(16#3#, 2);
        ELSE 
          rdStateMachineBitNatural_rdAddrCnt_next <= to_unsigned(16#0#, 4);
          rdStateMachineBitNatural_rdState_next <= to_unsigned(16#2#, 2);
        END IF;
      WHEN "11" =>
        rdStateMachineBitNatural_doutVldReg1_next <= '1';
        IF rdStateMachineBitNatural_rdAddrCnt = to_unsigned(16#F#, 4) THEN 
          rdStateMachineBitNatural_rdAddrCnt_next <= to_unsigned(16#0#, 4);
          rdStateMachineBitNatural_rdState_next <= to_unsigned(16#0#, 2);
        ELSE 
          rdStateMachineBitNatural_rdAddrCnt_next <= rdStateMachineBitNatural_rdAddrCnt + to_unsigned(16#1#, 4);
          rdStateMachineBitNatural_rdState_next <= to_unsigned(16#3#, 2);
        END IF;
      WHEN OTHERS => 
        rdStateMachineBitNatural_rdState_next <= to_unsigned(16#0#, 2);
        rdStateMachineBitNatural_rdAddrCnt_next <= to_unsigned(16#0#, 4);
        rdStateMachineBitNatural_doutVldReg1_next <= '0';
    END CASE;
    IF rdStateMachineBitNatural_doutVldReg1 = '1' THEN 
      rdStateMachineBitNatural_doutReReg_next <= memOut_re_signed;
      rdStateMachineBitNatural_doutImReg_next <= memOut_im_signed;
    END IF;
    rdStateMachineBitNatural_doutVldReg2_next <= rdStateMachineBitNatural_doutVldReg1;
    dout_re1_tmp <= rdStateMachineBitNatural_doutReReg;
    dout_im1_tmp <= rdStateMachineBitNatural_doutImReg;
    dout_vld1 <= rdStateMachineBitNatural_doutVldReg2;
  END PROCESS rdStateMachineBitNatural_output;


  dout_re1 <= std_logic_vector(dout_re1_tmp);

  dout_im1 <= std_logic_vector(dout_im1_tmp);

END rtl;

